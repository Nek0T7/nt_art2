#パッケージのインストール
install.packages("pacman")
library(pacman)
#DTAファイル読み込みのためのパッケージhaven
pacman::p_load(haven, tidyverse)
library(haven)
library(tidyverse)
#データを読み込み、CSVファイルとして保存する
data_raw <-read_dta("data/raw/artist_reputation_main.dta")
write.csv(data_raw,"artist_reputation_main.csv",row.names = FALSE)
#データを読み込み、CSVファイルとして保存する
data_raw <-read_dta("artist_reputation_main.dta")
#パッケージのインストール
install.packages("pacman")
library(pacman)
#DTAファイル読み込みのためのパッケージhaven
pacman::p_load(haven, tidyverse)
library(haven)
library(tidyverse)
install.packages("pacman")
#データを読み込み、CSVファイルとして保存する
data_raw <-read_dta("artist_reputation_main.dta")
write.csv(data_raw,"artist_reputation_main.csv",row.names = FALSE)
data_raw
#パッケージのインストール
packmanager::p_load(fixest)
#パッケージのインストール
pacman::p_load(fixest)
library(fixest)
# パッケージ
library(dplyr)
library(fixest)    # feols: 固定効果回帰
library(broom)     # tidy(): 推定結果の整理
library(stringr)
library(ggplot2)
# 1. データ読み込み
df <- read.csv("artist_reputation_main.csv")
# 2. モデルに含める変数の定義
pre_years  <- c(5, 10, 15, 20, 25, 30)            # 死亡前ダミー
post_years <- seq(10, 200, by = 10)               # 死亡後ダミー
pre_terms  <- paste0("year_after_death_m", pre_years)
post_terms <- paste0("year_after_death_",  post_years)
rhs_terms  <- c(pre_terms, post_terms)
fe_formula_str <- paste0("reputation ~ ", paste(rhs_terms, collapse = " + "), " | id_final")
fe_formula     <- as.formula(fe_formula_str)
# 3. 分析対象のグループ（Figure 1(A)〜(E)）
groups <- c("artist", "painter", "musiciancomposer", "writer", "other_artist")
# 4. 図作成関数
make_panel <- function(df, group_var) {
# サンプル絞り込み
df_sub <- df %>% filter(.data[[group_var]] == 1, sample == 1)
# 回帰
est <- feols(
fe_formula,
data    = df_sub,
cluster = ~ id_final
)
# 4. 図作成関数
make_panel <- function(df, group_var) {
# サンプル絞り込み
df_sub <- df %>% filter(.data[[group_var]] == 1, sample == 1)
# 回帰
est <- feols(
fe_formula,
data    = df_sub,
cluster = ~ id_final
)
# 推定結果整理
out <- tidy(est, conf.int = TRUE, conf.level = 0.95)
# term → 年に変換
term_to_year <- function(term) {
if (str_detect(term, "^year_after_death_m\\d+$")) {
-as.integer(str_extract(term, "\\d+"))
} else if (str_detect(term, "^year_after_death_\\d+$")) {
as.integer(str_extract(term, "\\d+"))
} else {
NA_integer_
}
}
plot_df <- out %>%
mutate(year = vapply(term, term_to_year, integer(1))) %>%
filter(!is.na(year)) %>%
select(year, estimate, conf.low, conf.high) %>%
# baseline (year=0, estimate=0) を追加
bind_rows(tibble(year = 0, estimate = 0, conf.low = 0, conf.high = 0)) %>%
arrange(year)
# Figure 1に合わせて -30〜100年
plot_df100 <- plot_df %>% filter(year >= -30, year <= 100)
# 作図
p <- ggplot(plot_df100, aes(x = year, y = estimate)) +
geom_line(color = "black") +
geom_point(color = "black") +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0, color = "black") +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_x_continuous(breaks = seq(-30, 100, by = 20)) +
labs(x = "Years after Death",
y = "Estimated Reputation",
title = paste0("Figure 1: ", group_var)) +
theme_classic(base_size = 14)
# EPS保存
ggsave(sprintf("graph_predicted_%s.eps", group_var),
plot = p, device = cairo_ps,
width = 6, height = 4, units = "in")
invisible(list(model = est, data = plot_df, plot = p))
}
# 5. 全グループ実行
results <- lapply(groups, function(g) make_panel(df, g))
names(results) <- groups
groups <- c("artist", "painter", "musiciancomposer", "writer", "other_artist")
# ----------------------------
# 再現分析: Figure 1 の準備部分
# データ: artist_reputation_main.csv
# ----------------------------
# パッケージ
library(dplyr)
library(fixest)    # feols: 固定効果回帰 (areg相当)
library(broom)     # tidy(): 推定結果の整形
library(stringr)
library(readr)
# 1. データ読み込み（作業ディレクトリに存在する前提）
df <- read_csv("artist_reputation_main.csv")
# 2. Stataの foreach var of varlist ... に対応
groups <- c("artist", "painter", "musiciancomposer", "writer", "other_artist")
# 3. 説明変数（Stataと同じ構成）
pre_years  <- c(5, 10, 15, 20, 25, 30)           # m5〜m30（死亡前）
post_years <- seq(10, 200, by = 10)              # 10〜200（死亡後）
pre_terms  <- paste0("year_after_death_m", pre_years)
post_terms <- paste0("year_after_death_",  post_years)
rhs_terms  <- c(pre_terms, post_terms)
# feols の式: areg reputation ... , a(id_final) cluster(id_final)
fe_formula <- as.formula(
paste0("reputation ~ ", paste(rhs_terms, collapse = " + "), " | id_final")
)
# 4. 推定＋係数抽出を行う関数
run_regression <- function(df, group_var) {
# サンプルを絞る（そのグループ==1 & sample==1）
df_sub <- df %>% filter(.data[[group_var]] == 1, sample == 1)
# 回帰（id_final 固定効果、クラスタも id_final）
est <- feols(
fe_formula,
data    = df_sub,
cluster = ~ id_final
)
# tidy()で係数とSE、95%CIを取得
out <- tidy(est, conf.int = TRUE, conf.level = 0.95)
# term → 年数に変換（m5 → -5、10 → +10）
term_to_year <- function(term) {
if (str_detect(term, "^year_after_death_m\\d+$")) {
-as.integer(str_extract(term, "\\d+"))
} else if (str_detect(term, "^year_after_death_\\d+$")) {
as.integer(str_extract(term, "\\d+"))
} else {
NA_integer_
}
}
plot_df <- out %>%
mutate(year = vapply(term, term_to_year, integer(1))) %>%
filter(!is.na(year)) %>%
select(year, estimate, std.error, conf.low, conf.high) %>%
# baseline (year=0, estimate=0, CIも0) を追加（Stata: replace tp=0 if _n==1000）
bind_rows(tibble(year = 0, estimate = 0, std.error = NA_real_,
conf.low = 0, conf.high = 0)) %>%
arrange(year) %>%
mutate(
ci_upper = estimate + 1.96 * std.error,
ci_lower = estimate - 1.96 * std.error
)
return(list(model = est, coef_df = plot_df))
}
# 5. 全グループについて回帰を実行
results <- lapply(groups, function(g) run_regression(df, g))
# ---- 前処理：必要列の型をfixest向けに整える ----
library(dplyr)
library(stringr)
library(readr)
df <- read_csv("artist_reputation_main.csv")
# Stataのダミー名と同じ並びで指定
pre_years  <- c(5, 10, 15, 20, 25, 30)
post_years <- seq(10, 200, by = 10)
pre_terms  <- paste0("year_after_death_m", pre_years)
post_terms <- paste0("year_after_death_",  post_years)
rhs_terms  <- c(pre_terms, post_terms)
groups <- c("artist", "painter", "musiciancomposer", "writer", "other_artist")
cols_needed_num <- c("reputation", rhs_terms, "sample", groups)
cols_needed_id  <- c("id_final")
# 存在している列だけ対象にする（欠損名があっても落ちないように）
num_cols <- intersect(cols_needed_num, names(df))
id_cols  <- intersect(cols_needed_id,  names(df))
# 文字列/論理 → 数値(0/1) に統一、idはfactorに
df <- df %>%
mutate(
across(all_of(num_cols), ~ {
if (is.logical(.)) as.integer(.)                  # TRUE/FALSE -> 1/0
else if (is.factor(.)) as.numeric(as.character(.))# factor数値化の安全策
else if (is.character(.)) as.numeric(.)           # "0"/"1"/"0.12" 等
else .                                           # 既にnumericならそのまま
}),
across(all_of(id_cols), ~ as.factor(.))
)
# もし非数値が混じって NA になってしまった行があれば落とす（任意）
# 特に従属変数 reputation は数値必須
df <- df %>% filter(!is.na(reputation), is.finite(reputation))
# sample が 0/1 か確認（論理のまま使うと比較がややこしくなる）
if ("sample" %in% names(df) && !is.numeric(df$sample)) {
df <- df %>% mutate(sample = as.integer(sample))
}
# ---- 前処理：必要列の型をfixest向けに整える ----
library(dplyr)
library(stringr)
library(readr)
df <- read_csv("artist_reputation_main.csv")
# Stataのダミー名と同じ並びで指定
pre_years  <- c(5, 10, 15, 20, 25, 30)
post_years <- seq(10, 200, by = 10)
pre_terms  <- paste0("year_after_death_m", pre_years)
post_terms <- paste0("year_after_death_",  post_years)
rhs_terms  <- c(pre_terms, post_terms)
groups <- c("artist", "painter", "musiciancomposer", "writer", "other_artist")
cols_needed_num <- c("reputation", rhs_terms, "sample", groups)
cols_needed_id  <- c("id_final")
# 存在している列だけ対象にする（欠損名があっても落ちないように）
num_cols <- intersect(cols_needed_num, names(df))
id_cols  <- intersect(cols_needed_id,  names(df))
# 文字列/論理 → 数値(0/1) に統一、idはfactorに
df <- df %>%
mutate(
across(all_of(num_cols), ~ {
if (is.logical(.)) as.integer(.)                  # TRUE/FALSE -> 1/0
else if (is.factor(.)) as.numeric(as.character(.))# factor数値化の安全策
else if (is.character(.)) as.numeric(.)           # "0"/"1"/"0.12" 等
else .                                           # 既にnumericならそのまま
}),
across(all_of(id_cols), ~ as.factor(.))
)
# もし非数値が混じって NA になってしまった行があれば落とす（任意）
# 特に従属変数 reputation は数値必須
df <- df %>% filter(!is.na(reputation), is.finite(reputation))
# sample が 0/1 か確認（論理のまま使うと比較がややこしくなる）
if ("sample" %in% names(df) && !is.numeric(df$sample)) {
df <- df %>% mutate(sample = as.integer(sample))
}
library(fixest)
library(broom)
fe_formula <- as.formula(
paste0("reputation ~ ", paste(rhs_terms, collapse = " + "), " | id_final")
)
run_regression <- function(df, group_var) {
df_sub <- df %>% filter(.data[[group_var]] == 1, sample == 1)
est <- feols(
fe_formula,
data    = df_sub,
cluster = ~ id_final
)
out <- tidy(est, conf.int = TRUE, conf.level = 0.95)
term_to_year <- function(term) {
if (str_detect(term, "^year_after_death_m\\d+$")) {
-as.integer(str_extract(term, "\\d+"))
} else if (str_detect(term, "^year_after_death_\\d+$")) {
as.integer(str_extract(term, "\\d+"))
} else {
NA_integer_
}
}
plot_df <- out %>%
mutate(year = vapply(term, term_to_year, integer(1))) %>%
filter(!is.na(year)) %>%
select(year, estimate, std.error, conf.low, conf.high) %>%
bind_rows(tibble(year = 0, estimate = 0, std.error = NA_real_, conf.low = 0, conf.high = 0)) %>%
arrange(year)
list(model = est, coef_df = plot_df)
}
groups <- c("artist", "painter", "musiciancomposer", "writer", "other_artist")
results <- lapply(groups, function(g) run_regression(df, g))
